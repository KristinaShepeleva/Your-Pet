{"version":3,"file":"static/js/864.a5039786.chunk.js","mappings":"iMAIaA,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1B,OACE,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,uBAAIA,GAAR,GAGpB,E,UCHKC,EAAgB,CACpBC,MAAO,GACPJ,KAAM,aACNK,MAAO,GACPC,SAAU,aACVC,MAAO,GACPC,KAAM,IAEKC,EAAW,WACtB,OAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAUEC,QAAQC,IAAIH,EAAU,YACtB,IAAMI,EAAiB,WACnBH,GAAaD,EAGhB,EACH,OACE,0BACE,SAAC,KAAD,CACER,cAAeA,EACfa,SAlBe,SAACC,EAAQC,GAE1BL,QAAQC,IAAII,GACdL,QAAQC,IAAIG,GACVC,EAAQC,YACRJ,GACD,EAaGK,iBAAkBC,EAAAA,GAHpB,SAKS,SAAAC,GAKL,OACE,UAAC,KAAD,YACE,8BACE,SAAC,KAAD,CAAOtB,KAAK,QAAQuB,KAAK,OAAOC,SAAUb,KAC1C,SAACZ,EAAD,CAAWC,KAAK,cAElB,8BACE,kCACA,SAAC,KAAD,CAAOA,KAAK,OAAOuB,KAAK,OAAOC,SAAUb,KACzC,SAACZ,EAAD,CAAWC,KAAK,aAElB,8BACE,kCACA,SAAC,KAAD,CAAOA,KAAK,QAAQuB,KAAK,QAAQC,SAAUb,KAC3C,SAACZ,EAAD,CAAWC,KAAK,cAElB,8BACE,sCACA,SAAC,KAAD,CAAOA,KAAK,WAAWuB,KAAK,OAAOC,SAAUb,KAC7C,SAACZ,EAAD,CAAWC,KAAK,iBAElB,8BACE,mCACA,SAAC,KAAD,CAAOA,KAAK,QAAQuB,KAAK,MAAMC,SAAUb,KACzC,SAACZ,EAAD,CAAWC,KAAK,cAElB,8BACE,kCACA,SAAC,KAAD,CAAOA,KAAK,OAAOuB,KAAK,OAAOC,SAAUb,KACzC,SAACZ,EAAD,CAAWC,KAAK,aAEZW,IAAa,mBAAQY,KAAK,SAAb,oBAMxB,KAMR,EC7ED,EATa,WACX,OACE,iCACE,sCACA,SAACd,EAAD,MAGL,C,sHCNKgB,EAAgB,wCAKTC,EAAiBC,EAAAA,KAAaC,MAAM,CAC/CC,SAAUF,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIC,SAAS,YAC/C3B,MAAOsB,EAAAA,KAAatB,MAAM,8BAA8B2B,SAAS,YACjEC,SAAUN,EAAAA,KAEPG,IAAI,GACJI,QACCT,EACA,8EAEDO,SAAS,YACZG,gBAAiBR,EAAAA,KAEdS,MAAM,CAACT,EAAAA,GAAQ,YAAa,MAAO,uBACnCK,SAAS,cAGDK,EAAcV,EAAAA,KAAaC,MAAM,CAC5CvB,MAAOsB,EAAAA,KAAatB,MAAM,8BAA8B2B,SAAS,YACjEC,SAAUN,EAAAA,KAEPG,IAAI,GACJI,QAAQT,EAAe,sBACvBO,SAAS,cAGDX,EAAaM,EAAAA,KAAaC,MAAM,CAC3CxB,MAAOuB,EAAAA,KACP3B,KAAM2B,EAAAA,KAEHK,SAAS,YACTE,QAlCc,oCAkCM,sBACvB7B,MAAOsB,EAAAA,KAEJW,OACAN,SAAS,YACTE,QAxCe,aAwCM,uBACxB5B,SAAUqB,EAAAA,KAAaK,SAAS,YAChCzB,MAAOoB,EAAAA,KAAaK,SAAS,YAC7BxB,KAAMmB,EAAAA,KAAaK,SAAS,a","sources":["components/UserForm/FormError.jsx","components/UserForm/UserForm.jsx","pages/UserPage/UserPage.js","schemas/index.js"],"sourcesContent":["import { ErrorMessage } from 'formik';\nimport PropTypes from 'prop-types';\n\n\nexport const FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <p>{message}</p>}\n    />\n  )\n};\n\nFormError.propTypes = {\n  name: PropTypes.string.isRequired,\n};","import { Field, Form, Formik } from 'formik';\n// import { useDispatch } from \"react-redux\";\n// import { FormError } from \"./FormError\";\nimport { userSchema } from '../../schemas';\nimport { FormError } from './FormError';\n// import { CrossSmallIcon, EditIcon } from '../../helpers/icons';\nimport { useState } from 'react';\n\nconst initialValues = {\n  photo: '',\n  name: 'AAA1dgdgdg',\n  email: '',\n  birthday: '2018-04-28',\n  phone: '',\n  city: '',\n};\nexport const UserForm = () => {\n  const [isActive, setIsActive] = useState(true);\n  //  const dispatch = useDispatch();\n  const handleSubmit = (values, actions) => {\n    // dispatch(logIn(values));\n      console.log(actions);\n    console.log(values);\n      actions.resetForm();\n      toggleIsActive()\n    };\n    \n    console.log(isActive, 'isActive');\n    const toggleIsActive = () => {\n        setIsActive(!isActive);\n        // Formik.resetForm()\n        \n    }\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={userSchema}\n      >\n              {formik => {\n                //   const stopEditingData= () => {\n                //       formik.resetForm()\n                //       toggleIsActive();\n                //   }\n          return (\n            <Form>\n              <label>\n                <Field name=\"photo\" type=\"file\" disabled={isActive} />\n                <FormError name=\"photo\" />\n              </label>\n              <label>\n                <p>Name:</p>\n                <Field name=\"name\" type=\"text\" disabled={isActive} />\n                <FormError name=\"name\" />\n              </label>\n              <label>\n                <p>Email</p>\n                <Field name=\"email\" type=\"email\" disabled={isActive} />\n                <FormError name=\"email\" />\n              </label>\n              <label>\n                <p>Birthday:</p>\n                <Field name=\"birthday\" type=\"date\" disabled={isActive} />\n                <FormError name=\"birthday\" />\n              </label>\n              <label>\n                <p>Phone:</p>\n                <Field name=\"phone\" type=\"tel\" disabled={isActive} />\n                <FormError name=\"phone\" />\n              </label>\n              <label>\n                <p>City:</p>\n                <Field name=\"city\" type=\"text\" disabled={isActive} />\n                <FormError name=\"city\" />\n              </label>\n                  {!isActive && (<button type=\"submit\">Save</button>)}\n               \n                {/* {isActive ?           <button type='button' onClick={() => setIsActive(!isActive)}><EditIcon /></button>\n : <button type='button' onClick={stopEditingData}> <CrossSmallIcon /></button>} */}\n              </Form>\n          );\n        }}\n          </Formik>\n        {/* {isActive ?           <button type='button' onClick={() => setIsActive(!isActive)}><EditIcon /></button>\n : <button type='button' onClick={}> <CrossSmallIcon /></button>} */}\n    </div>\n  );\n};\n","import { UserForm } from 'components/UserForm/UserForm';\n\nconst User = () => {\n  return (\n    <>\n      <h2>UserPage</h2>\n      <UserForm />\n    </>\n  );\n};\n\nexport default User;\n","import * as yup from 'yup';\n\n\nconst passwordRules = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/;\nconst emailRegExp = /.+@.+\\..+/i;\nconst nameRegExp = /^[a-zа-яё]{2,16}$/i;\n\n\nexport const registerSchema = yup.object().shape({\n  username: yup.string().min(2).max(16).required('Required'),\n  email: yup.string().email('Please enter a valid email').required('Required'),\n  password: yup\n    .string()\n    .min(5)\n    .matches(\n      passwordRules,\n      'The password must have 1 uppercase letter, 1 lowercase letter and 1 number'\n    )\n    .required('Required'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Password must match')\n    .required('Required'),\n});\n\nexport const loginSchema = yup.object().shape({\n  email: yup.string().email('Please enter a valid email').required('Required'),\n  password: yup\n    .string()\n    .min(5)\n    .matches(passwordRules, 'Not valid password')\n    .required('Required'),\n});\n\nexport const userSchema = yup.object().shape({\n  photo: yup.string(),\n  name: yup\n    .string()\n    .required('Required')\n    .matches(nameRegExp, 'Enter a valid Name'),\n  email: yup\n    .string()\n    .trim()\n    .required('Required')\n    .matches(emailRegExp, 'Enter a valid Email'),\n  birthday: yup.string().required('Required'),\n  phone: yup.string().required('Required'),\n  city: yup.string().required('Required'),\n});\n"],"names":["FormError","name","render","message","initialValues","photo","email","birthday","phone","city","UserForm","useState","isActive","setIsActive","console","log","toggleIsActive","onSubmit","values","actions","resetForm","validationSchema","userSchema","formik","type","disabled","passwordRules","registerSchema","yup","shape","username","min","max","required","password","matches","confirmPassword","oneOf","loginSchema","trim"],"sourceRoot":""}