{"version":3,"file":"static/js/433.213c56cb.chunk.js","mappings":"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","sources":["webpack://your-pet/./src/components/CustomInput/CustomInput.module.css?9201","components/CustomInput/CustomInput.jsx","webpack://your-pet/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","webpack://your-pet/./src/pages/RegisterPage/RegisterPage.module.css?fdcb","pages/RegisterPage/RegisterPage.js","schemas/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__ObazE\",\"inputError\":\"CustomInput_inputError__agYzR\",\"inputSuccess\":\"CustomInput_inputSuccess__xE1GL\",\"error\":\"CustomInput_error__hrpIn\"};","import { useField } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport css from './CustomInput.module.css';\n\nconst CustomInput = ({ submitCount, isValid, ...props }) => {\n  const [field, meta] = useField(props);\n  const success = !meta.error && meta.value !== '';\n  const error = !isValid && submitCount > 0 && meta.error;\n  return (\n    <>\n      <input\n        autoComplete=\"off\"\n        {...field}\n        {...props}\n        className={`${css.input} ${error ? css.inputError : ''} ${\n          success ? css.inputSuccess : ''\n        }`}\n      />\n      {error && <div className={css.error}>{meta.error}</div>}\n    </>\n  );\n};\n\nexport default CustomInput;\n\nCustomInput.propTypes = {\n  submitCount: PropTypes.number.isRequired,\n  isValid: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegisterForm_container__w0Atp\",\"title\":\"RegisterForm_title__EvDyW\",\"form\":\"RegisterForm_form__Tv43W\",\"iconInput\":\"RegisterForm_iconInput__n83p7\",\"eyeIcon\":\"RegisterForm_eyeIcon__PZ59+\",\"crossIcon\":\"RegisterForm_crossIcon__ggC75\",\"checkIcon\":\"RegisterForm_checkIcon__jvji-\",\"checkEmailIcon\":\"RegisterForm_checkEmailIcon__meM9n\",\"crossEmailIcon\":\"RegisterForm_crossEmailIcon__h0nmY\",\"btn\":\"RegisterForm_btn__bgTuW\",\"linkContainer\":\"RegisterForm_linkContainer__Sxc8O\",\"link\":\"RegisterForm_link__xu2eW\"};","import { Form, Formik } from 'formik';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n// import 'react-toastify/dist/ReactToastify.css';\nimport { toast } from 'react-toastify';\n\nimport css from './RegisterForm.module.css';\nimport { registerSchema } from 'schemas';\nimport CustomInput from 'components/CustomInput/CustomInput';\nimport {\n  CheckIcon,\n  CrossBigIcon,\n  EyeClosedIcon,\n  EyeOpenIcon,\n} from 'helpers/icons';\nimport { createUser } from 'redux/auth/authOperations';\n\nconst initialValues = {\n  username: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const toogleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const toogleShowConfirmPassword = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  const onSubmit = (value, actions) => {\n    const newUser = {\n      name: value.username,\n      email: value.email,\n      password: value.password,\n    };\n    dispatch(createUser(newUser)).then(data => {\n      const error = data.payload;\n      if (error.status === 409) {\n        return toast.error('User with this email is already registered');\n      } else if (error.status === 400) {\n        return toast.error('Invalid Email');\n      }\n    });\n    actions.resetForm();\n  };\n\n  return (\n    <div className={css.container}>\n      <h1 className={css.title}>Registration</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={onSubmit}\n        className={css.formik}\n      >\n        {({ isValid, submitCount, values, errors }) => {\n          const error = !isValid && submitCount > 0;\n          return (\n            <Form className={css.form}>\n              <div>\n                <div className={css.iconInput}>\n                  <CustomInput\n                    type=\"name\"\n                    name=\"username\"\n                    placeholder=\"Name\"\n                    isValid={isValid}\n                    submitCount={submitCount}\n                  />\n                  {error && errors.username && (\n                    <CrossBigIcon className={css.crossEmailIcon} />\n                  )}\n                  {!errors.username && values.username !== '' && (\n                    <CheckIcon className={css.checkEmailIcon} />\n                  )}\n                </div>\n                <div className={css.iconInput}>\n                  <CustomInput\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    isValid={isValid}\n                    submitCount={submitCount}\n                  />\n                  {error && errors.email && (\n                    <CrossBigIcon className={css.crossEmailIcon} />\n                  )}\n                  {!errors.email && values.email !== '' && (\n                    <CheckIcon className={css.checkEmailIcon} />\n                  )}\n                </div>\n                <div className={css.iconInput}>\n                  <CustomInput\n                    type={showPassword ? 'text' : 'password'}\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    isValid={isValid}\n                    submitCount={submitCount}\n                  />\n                  {error && errors.password && (\n                    <CrossBigIcon className={css.crossIcon} />\n                  )}\n                  {!errors.password && values.password !== '' && (\n                    <CheckIcon className={css.checkIcon} />\n                  )}\n                  <button\n                    type=\"button\"\n                    onClick={toogleShowPassword}\n                    className={css.eyeIcon}\n                  >\n                    {showPassword ? <EyeOpenIcon /> : <EyeClosedIcon />}\n                  </button>\n                </div>\n                <div className={css.iconInput}>\n                  <CustomInput\n                    type={showConfirmPassword ? 'text' : 'password'}\n                    name=\"confirmPassword\"\n                    placeholder=\"Confirm password\"\n                    isValid={isValid}\n                    submitCount={submitCount}\n                    style={{ marginBottom: 0 }}\n                  />\n                  {error && errors.confirmPassword && (\n                    <CrossBigIcon className={css.crossIcon} />\n                  )}\n                  {!errors.confirmPassword && values.confirmPassword !== '' && (\n                    <CheckIcon className={css.checkIcon} />\n                  )}\n                  <button\n                    type=\"button\"\n                    onClick={toogleShowConfirmPassword}\n                    className={css.eyeIcon}\n                  >\n                    {showConfirmPassword ? <EyeOpenIcon /> : <EyeClosedIcon />}\n                  </button>\n                </div>\n              </div>\n              <div>\n                <button className={css.btn} type=\"submit\">\n                  Registration\n                </button>\n                <div className={css.linkContainer}>\n                  <p>Already have an account?</p>\n                  <NavLink to=\"/login\" className={css.link}>\n                    Login\n                  </NavLink>\n                </div>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n      {/* <ToastContainer autoClose={3000} /> */}\n    </div>\n  );\n};\n\nexport default RegisterForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"registerPage\":\"RegisterPage_registerPage__pk1kr\"};","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport css from './RegisterPage.module.css';\nconst RegisterPage = () => {\n  return (\n    <div className={css.registerPage}>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","import * as yup from 'yup';\n\nconst passwordRules = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,16}$/;\n\nconst emailRegExp = /.+@.+\\..+/i;\nconst nameRegExp = /^[a-zа-яё]{2,16}$/i;\nconst phoneRegExp = /^\\+380\\d{9}$/;\n\nexport const registerSchema = yup.object().shape({\n  username: yup.string().min(2).max(16).required('Required'),\n  email: yup\n    .string()\n    .email(emailRegExp, 'Please enter a valid email')\n    .required('Required'),\n  password: yup\n    .string()\n    .matches(\n      passwordRules,\n      'The password must have 1 uppercase letter, 1 lowercase letter and 1 number'\n    )\n    .required('Required'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Password must match')\n    .required('Required'),\n});\n\nexport const loginSchema = yup.object().shape({\n  email: yup.string().email('Please enter a valid email').required('Required'),\n  password: yup\n    .string()\n    .matches(passwordRules, 'Not valid password')\n    .required('Required'),\n});\n\nexport const userSchema = yup.object().shape({\n  // avatarURL: yup.string(),\n  avatarURL: yup.mixed().required('Add your photo'),\n\n  name: yup\n    .string()\n    .required('Required')\n    .matches(nameRegExp, 'The name must contain a maximum of 16 letters'),\n  email: yup\n    .string()\n    .trim()\n    .required('Required')\n    .matches(emailRegExp, 'Enter a valid Email'),\n  birthday: yup.string().required('Required'),\n  phone: yup\n    .string()\n    .required('Required')\n    .matches(\n      phoneRegExp,\n      'The number must begin with \"+380\" and contain 9 more digits'\n    ),\n  city: yup.string().required('Required'),\n});\n"],"names":["submitCount","isValid","props","useField","field","meta","success","error","value","autoComplete","className","css","initialValues","username","email","password","confirmPassword","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","dispatch","useDispatch","toogleShowPassword","toogleShowConfirmPassword","validationSchema","registerSchema","onSubmit","actions","newUser","name","createUser","then","data","payload","status","toast","resetForm","values","errors","CustomInput","type","placeholder","onClick","style","marginBottom","to","passwordRules","emailRegExp","yup","shape","min","max","required","matches","oneOf","loginSchema","userSchema","avatarURL","trim","birthday","phone","city"],"sourceRoot":""}