{"version":3,"file":"static/js/980.6265d5f6.chunk.js","mappings":"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","sources":["webpack://your-pet/./src/components/Container/Container.module.css?9f71","components/Container/Container.js","webpack://your-pet/./src/components/UserForm/UserInput/UserInput.module.css?34c0","components/UserForm/UserInput/UserInput.jsx","webpack://your-pet/./src/components/UserForm/Form/UserForm.module.css?a6bf","components/UserForm/LogoutUser.jsx","components/UserForm/Form/UserForm.jsx","pages/UserPage/UserPage.js","schemas/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__VVOCq\"};","import PropTypes from 'prop-types';\nimport css from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={css.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"UserInput_label__rwL-4\",\"labelText\":\"UserInput_labelText__dLSSN\",\"input\":\"UserInput_input__LhhAa\"};","import css from './UserInput.module.css';\n\n\nexport const UserInput = ({ text, name, type, isActive, onChange, value, error, helperText }) => {\n    return (\n        <>\n          <label className={css.label}>\n                <span className={css.labelText}>{text}:</span>\n                <input className={css.input} name={name} type={type} disabled={isActive} onChange={onChange} value={value}/>\n            </label>\n             {error ? (\n         <div>{helperText}</div>\n       ) : null}\n        </>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"UserForm_wrapper__Fxcb1\",\"EditCloseBt\":\"UserForm_EditCloseBt__xpCnf\",\"icon\":\"UserForm_icon__Uhvd8\",\"form\":\"UserForm_form__r5DCm\",\"boxAvatar\":\"UserForm_boxAvatar__IUBDV\",\"imgAvatar\":\"UserForm_imgAvatar__nTcBs\",\"editAvatarBt\":\"UserForm_editAvatarBt__PdeD1\",\"editAvatarIcon\":\"UserForm_editAvatarIcon__nD2Xr\",\"labelInputFale\":\"UserForm_labelInputFale__a1CEk\",\"inputFile\":\"UserForm_inputFile__CHbjf\",\"formGroup\":\"UserForm_formGroup__H4Oti\"};","import { LogoutIcon } from \"helpers/icons\"\nimport { useDispatch } from \"react-redux\";\nimport { logout } from \"redux/auth/authOperations\";\n\nexport const LogoutUser = () => {\n    const dispatch = useDispatch();\n    return (\n           <button type=\"button\" onClick={() => dispatch(logout())}>\n        <LogoutIcon /> Logout\n      </button>\n    )\n}","import { useFormik } from 'formik';\nimport {\n  CameraIcon,\n  CheckIcon,\n  CrossBigIcon,\n  CrossSmallIcon,\n  EditIcon,\n  PhotoDefault,\n} from 'helpers/icons';\nimport { useAuth } from 'hooks';\nimport {  useState } from 'react';\nimport { userSchema } from 'schemas';\nimport { UserInput } from '../UserInput/UserInput';\nimport css from './UserForm.module.css';\nimport { LogoutUser } from 'components/UserForm/LogoutUser';\n\nexport const UserForm = () => {\n  const { user } = useAuth();\n  const [avatarURL, setAvatarURL] = useState(null);\n  const [isActive, setIsActive] = useState(true);\n  const [confirmAvatar, setConfirmAvatar] = useState(false);\nconsole.log(confirmAvatar);\n  const formik = useFormik({\n    initialValues: {\n      avatarURL: '',\n      name: user.name,\n      email: user.email,\n      birthday: '2018-04-28',\n      phone: '+3809745353530',\n      city: 'Kyiv',\n    },\n    onSubmit: (values, actions) => {\n      const formData = new FormData();\n      formData.append('avatarURL', values.avatarURL);\n      formData.append('name', values.name);\n      formData.append('email', values.email);\n      formData.append('birthday', values.birthday);\n      formData.append('phone', values.phone);\n      formData.append('city', values.city);\n      setIsActive(!isActive);\n      setConfirmAvatar(false);\n      actions.resetForm();\n    },\n    validationSchema: userSchema,\n  });\n  return (\n    <div className={css.wrapper}>\n      <form onSubmit={formik.handleSubmit}>\n        <div className={css.boxAvatar}>\n          {avatarURL ? (\n            <img className={css.imgAvatar} src={URL.createObjectURL(avatarURL)} alt=\"avatar\" />\n          ) : user?.avatarURL ? (\n            <img className={css.imgAvatar} src={user.avatarURL} alt=\"avatar\" />\n          ) : (\n            <div>\n              <PhotoDefault />\n            </div>\n          )}\n        </div>\n       {!isActive && confirmAvatar && ( <div >\n          <button\n            type=\"button\"\n            style={{ color: 'blue' }}\n            onClick={() => setConfirmAvatar(false)}\n          >\n            {' '}\n            <CheckIcon />\n          </button>\n          <span>Confirm</span>\n          <button\n            type=\"button\"\n        \n            onClick={() => {\n              setConfirmAvatar(false);\n              formik.setFieldValue('avatarURL', '');\n              setAvatarURL(null);\n            \n            }}\n          >\n            {' '}\n            <CrossSmallIcon />\n          </button>\n        </div>)}\n        <label className={css.labelInputFale}>\n        {!isActive && !confirmAvatar && ( <button className={css.editAvatarBt} type='button' onClick={() => setConfirmAvatar(true)}>\n            <CameraIcon className={css.editAvatarIcon} /> Edit photo</button>)}\n          <input\n            className={css.inputFile}\n            name=\"avatarURL\"\n            type=\"file\"\n            disabled={isActive}\n            onChange={e => {\n              formik.setFieldValue('avatarURL', e);\n              setAvatarURL(e.target.files[0]);\n            }}\n            accept=\"image/*,.png,.jpg,.gif,.web\"\n          />\n        </label>\n        <div className={css.formGroup}>\n        <UserInput\n          text=\"Name\"\n          name=\"name\"\n          type=\"text\"\n          isActive={isActive}\n          onChange={formik.handleChange}\n          value={formik.values.name}\n          error={formik.touched.name && formik.errors.name}\n          helperText={formik.errors.name}\n        />\n        <UserInput\n          text=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          isActive={isActive}\n          onChange={formik.handleChange}\n          value={formik.values.email}\n          error={formik.touched.email && formik.errors.email}\n          helperText={formik.errors.email}\n        />\n        <UserInput\n          text=\"Birthday\"\n          name=\"birthday\"\n          type=\"date\"\n          isActive={isActive}\n          onChange={formik.handleChange}\n          value={formik.values.birthday}\n          error={formik.touched.birthday && formik.errors.birthday}\n          helperText={formik.errors.birthday}\n        />\n        <UserInput\n          text=\"Phone\"\n          name=\"phone\"\n          type=\"tel\"\n          isActive={isActive}\n          onChange={formik.handleChange}\n          value={formik.values.phone}\n          error={formik.touched.phone && formik.errors.phone}\n          helperText={formik.errors.phone}\n        />\n        <UserInput\n          text=\"City\"\n          name=\"city\"\n          type=\"text\"\n          isActive={isActive}\n          onChange={formik.handleChange}\n          value={formik.values.city}\n          error={formik.touched.city && formik.errors.city}\n          helperText={formik.errors.city}\n        />\n</div>\n        {!isActive && <button type=\"submit\">Save</button>}\n  \n      </form>\n      {isActive ? (\n        <button className={css.EditCloseBt}type=\"button\" onClick={() => setIsActive(!isActive)}>\n          <EditIcon />\n        </button>\n      ) : (\n        <button className={css.EditCloseBt}\n          type=\"reset\"\n          onClick={() => {\n            formik.resetForm();\n            setIsActive(!isActive);\n            setAvatarURL(null);\n            setConfirmAvatar(false)\n          }}\n        >\n         \n          <CrossBigIcon className={css.icon} />\n        </button>\n      )}\n      <LogoutUser />\n    </div>\n  );\n};\n","import Container from 'components/Container/Container';\nimport { UserForm } from 'components/UserForm/Form/UserForm';\n\nconst User = () => {\n  return (\n    <>\n      <Container>\n        <h2>UserPage</h2>\n        <UserForm />\n      </Container>\n    </>\n  );\n};\n\nexport default User;\n","import * as yup from 'yup';\n\n\nconst passwordRules = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,16}$/;\n\nconst emailRegExp = /.+@.+\\..+/i;\nconst nameRegExp = /^[a-zа-яё]{2,16}$/i;\n\nexport const registerSchema = yup.object().shape({\n  username: yup.string().min(2).max(16).required('Required'),\n  email: yup\n    .string()\n    .email(emailRegExp, 'Please enter a valid email')\n    .required('Required'),\n  password: yup\n    .string()\n    .matches(\n      passwordRules,\n      'The password must have 1 uppercase letter, 1 lowercase letter and 1 number'\n    )\n    .required('Required'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Password must match')\n    .required('Required'),\n});\n\nexport const loginSchema = yup.object().shape({\n  email: yup.string().email('Please enter a valid email').required('Required'),\n  password: yup\n    .string()\n    .matches(passwordRules, 'Not valid password')\n    .required('Required'),\n});\n\nexport const userSchema = yup.object().shape({\n  // avatarURL: yup.string(),\n  avatarURL: yup.mixed(),\n\n  name: yup\n    .string()\n    .required('Required')\n    .matches(nameRegExp, 'Enter a valid Name'),\n  email: yup\n    .string()\n    .trim()\n    .required('Required')\n    .matches(emailRegExp, 'Enter a valid Email'),\n  birthday: yup.string().required('Required'),\n  phone: yup.string().required('Required'),\n  city: yup.string().required('Required'),\n});\n"],"names":["children","className","css","UserInput","text","name","type","isActive","onChange","value","error","helperText","disabled","LogoutUser","dispatch","useDispatch","onClick","logout","UserForm","user","useAuth","useState","avatarURL","setAvatarURL","setIsActive","confirmAvatar","setConfirmAvatar","console","log","formik","useFormik","initialValues","email","birthday","phone","city","onSubmit","values","actions","formData","FormData","append","resetForm","validationSchema","userSchema","handleSubmit","src","URL","createObjectURL","alt","style","color","setFieldValue","e","target","files","accept","handleChange","touched","errors","Container","passwordRules","emailRegExp","registerSchema","yup","shape","username","min","max","required","password","matches","confirmPassword","oneOf","loginSchema","trim"],"sourceRoot":""}